name: 02 Crawler Scheduler

on:
  repository_dispatch:
    types: [run-crawler]
  workflow_dispatch:

jobs:
  crawl-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout crawler-service branch
        uses: actions/checkout@v3
        with:
          ref: crawler-service
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r modules/news-crawler-service/requirements.txt

      - name: Run crawler and generate output with retry
        id: crawler_run
        run: |
          n=0
          max_retries=100
          until [ $n -ge $max_retries ]
          do
            echo "Attempt $(($n+1)) of $max_retries: Running crawler..."
            if python modules/news-crawler-service/run.py crawl; then
              echo "Crawler run succeeded."
              break
            fi
            n=$(($n+1))
            echo "Crawler run failed. Retrying in 1 second..."
            sleep 1
          done
          if [ $n -ge $max_retries ]; then
            echo "Crawler failed after $max_retries attempts."
            exit 1
          fi
          mkdir -p modules/news-crawler-service/src/output

      - name: Set up Git identity
        run: |
          git config --global user.name "fox142857"
          git config --global user.email "fox142857@foxmail.com"

      - name: Commit new crawler output on crawler-service branch
        run: |
          git add modules/news-crawler-service/src/output/
          git commit -m "Update crawler output on crawler-service branch [skip ci]" || echo "No changes to commit"
          git push origin crawler-service

      - name: Checkout master branch
        run: |
          git fetch origin master
          git reset --hard HEAD
          git checkout master
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -name "*.pyc" -delete

      - name: Merge changes from crawler-service branch into master
        run: |
          set -e
          # 尝试合并，如果合并冲突则自动解决输出目录中所有文件冲突，始终保留 crawler-service 分支的版本
          if ! git merge -X theirs --allow-unrelated-histories --no-ff crawler-service -m "Merge crawler output into master [skip ci]"; then
            echo "Merge conflict detected. Auto-resolving all conflicts in output directory..."
            git checkout --theirs modules/news-crawler-service/src/output/
            git add modules/news-crawler-service/src/output/
            git commit -m "Auto-resolve merge conflicts for output directory files based on crawler-service branch [skip ci]"
          fi

      - name: Push to master branch
        run: |
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Trigger Copy News List workflow
        if: success()
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type": "copy-newslist"}'

      - name: Trigger email alert for crawler result
        if: always()
        run: |
          WORKFLOW_FILE="02-crawler-scheduler.yml"
          if [ "${{ job.status }}" = "Success" ]; then
            ORIGINAL_SUBJECT="${WORKFLOW_FILE}: Crawl succeeded"
            CLASSIFICATION="Info"
            DETAIL="Result: The crawler ran successfully and output was updated."
          else
            ORIGINAL_SUBJECT="${WORKFLOW_FILE}: Crawl failed"
            CLASSIFICATION="Warn"
            DETAIL="Result: The crawler encountered errors. Please check logs."
          fi
          FINAL_SUBJECT="Workflow Alert: ${CLASSIFICATION}"
          FINAL_BODY="${WORKFLOW_FILE}\n${ORIGINAL_SUBJECT}\n${DETAIL}"
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d "{\"event_type\": \"send-email-alert\", \"client_payload\": {\"subject\": \"${FINAL_SUBJECT}\", \"body\": \"${FINAL_BODY}\"}}"
